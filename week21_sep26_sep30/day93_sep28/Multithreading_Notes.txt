
2. Multithreading:
	- a thread is a light - weight smallest part of a process that can run concurrently with the other parts of the same process. 
	
	- Threads are independent because they all have separate path of execution that's the reason, if the exception occurs in one thread, it doesn't effect the other threads.

	- All threads of a process share the common memory.

	- The process of executing multiple threads simulteneously is called multithreading.

Summarize:
	1. The main purpose of multithreading is to provide simulteneous execution of two or more parts of a program to maximum utilize the CPU time. A multithreaded program contains two or more parts that can run concurrently. Each such part of a program called cthread.

	2. Threads are light-weight sub-process, they share the common memory space. IN multithreading environment, programs that are benefited from multithreading, utilize the maximum CPU time so that the idle time can be kept to minimum.

	3. A thread can be in one of the following states: 
		NEW - a thread that has not yet started is in this state
		RUNNABLE - a thread executing in the Java virtual machine is in this state
		BLOCKED - a thread that is blocked waiting for a monitor lock 
		WAITING - a thread that is waiting indefinitely for another thread to perform a particular action 
		TIMED_WAITING - a thread that is waiting for another thread to perform an action for up to a specified waiting time 
		TERMINATED - a thread that has exited

-> Multitasking vs Multithreading vs Multiprocessing vs parallel processing: 
	- Multitasking: ability to execute more than one task at the same time is known as multitasking

	- Multithreading: It is a process of executing multiple threads simulteneously. Multithreading is also know as Thread-based Multitasking

	- Multiprocessing: it is same as multitasking, however in multiprocessing more than one CPU's are involved. On the other hand, one cPU is involved in multitasking

	- Parallel processing: It refers to the utilization of multiple CPU's in a single computer system.

-> Creating a thread: 
	- There are 2 ways to create a thread:
		1. by extending Thread class
		2. by implementing Runnable interface

	- have some methods: 
		1. getName(): used for obtaining a thread's name
		2. getPriority(): obtain a thread's priority 
		3. isAlive(): determine if a thread is still running
		4. join(): wait for a thread to terminate 
		5. run(): entry point for the thread
		6. sleep(): suspend a thread for a period of time
		7. start(): start a thread by calling its run() method

	Method1: Thread creation by extending Thread class
	Example: MultiThreadingCreateExtendingThreadClassExample1.java
	Example: MultiThreadingCount.java
	Example: MultithreadingImplementsRunnable.java
	Example: MultiThreadingCountRunnable.java

- Thread priorities: 
	1. thread priorities are the integers which decide how one thread should be treated with respect to the others

	2. thread priority decides when to switch from one running thread to another, process is called context switching

	3. a thread can voluntarily release control and the highest priority thread that is ready to run is given the CPU.

	4. to set the priority of the thread setPriority() method is used which is a method of the class Thread Class.

	5. in place of defining the priority in integers, we can use MIN_PRIORITY, NORM_PRIORITY or MAX_PRIORITY

- Methods: isAlive() and join()
	- the main thread should finish last else other threads which have spawned from the main thread will also finish

	- to know whether the thread has finished we can call isAlive() on the thread which returns true if the thread is not finished

	- another way to achieve this by using join() method, this method when called from the parent thread makes parent thread wait till the child thread terminates

	- these methods are defined in the Thread class

	- we have used isAlive() method

-> Synchronization:
	


-> Thread Life Cycle and Thread Scheduling:

