-> Introduction to Java Programming
    - Java was developed by Sun Microsystems Inc., in 1991.
    - Later acquired by Oracle Corporation.

    - It was developed by James Gosling and Patrick Naughton.
    - It is a simple Programming Language.
    - Writing, Compiling and Debugging a program is easier in Java.
    - It helps to create Modular Programs and reusable code.

-> Java Terminology:
    - Java Virtual Machine (JVM): Java Virtual Machine, or JVM, loads, verifies and executes Java bytecode. It is known as the interpreter or the core of Java programming language because it executes Java programming.
    - The phases of program execution: 
        - we write the program, then we compile the program and at the last we run the program
        1) writing the program
        2) compilation of program done by 'javac' compiler, javac is a primary java compiler included in Java Development Kit (JDK), it takes java program as input and generates the bytecode as output.
        3) jvm executes the bytecode generated by compiler

    - each operating system has different JVM, however the output they produce after execution of bytecode is same across all operating systems

    - bytecode: the 'javac compiler' of 'JDK' compiles the 'java source code' into 'bytecode' so that it can be 'executed by JVM'. the bytecode is saved in a '.class' file by compiler

    - Java Development Kit (JDK): The Java Development Kit (JDK) is a software development environment - used for developing 'Java applications' and 'applets'. 
    - It includes the: Java Runtime Environment (JRE), an interpreter/loader (java), a compiler (javac), an archiver (jar), a documentation generator (javadoc) and other tools needed in Java development.

    - what is java applications: A 'Java application' is a 'program' written in 'Java' that is 'executed stand-alone' either in a 'client or a server'. The 'JVM' interprets the 'instructions' and 'executes the program' in the 'JRE', where the 'Java programs' gain 'complete access' to every computer resource available in the computer system.

    - Java application examples: Netbeans, IntelliJ, and Eclipse are some examples of programs that utilize Java programming. 

    - Types of Java applications: (4)
        1. Standalone
        2. Web 
        3. Enterprise 
        4. Mobile

    - Java Runtime Environment (JRE): 'JRE' is a 'part of JDK' which means that JDK includes JRE. 

-> Main features of Java: 
    1. Independent Programming Language
    2. Object Oriented Programming Language
        1. Abstraction
        2. Encapsulation
        3. Inheritance
        4. Polymorphism
    3. Simple and Robust Language
    4. Secure
    5. Distributed
    6. Multithreading: In Java, 'Multithreading' refers to a 'process of executing two or more threads simultaneously' for maximum utilization of the CPU. A 'thread' in 'Java' is a 'lightweight process requiring' fewer resources to 'create and share the process' resources.
    7. Portable

-> History of Java: 
    - the versions of JDK - JDK 1.0 to JDK 17
    - stable JDK 8 
    - stable JDK 11

-> JDK vs JRE vs JVM: 

    - JDK (Java Development Kit) - it is a superset of JRE, it contains that JRE has along with development tools such as compiler, debugger etc., 

    - Features of JDK: 
        1. The JDK comes with a complete JRE, that is different fram the regular JRE - that's why it is usally called a Private Runtime 
        2. It has all the Java Development Tools such as compiler, JVM, JRE, debugger etc., 
        3. You need JDK in order to write and run the Java Program
        4. JDK supports multiple platforms and can be installed on Windows, Mac, linux etc., 

    - JRE (Java Runtime Environment) - The JRE is the environment within which the Java Virtual Machine runs., JRE contains the Java Virtual Machine (JVM), class, libraries, and other files excluding development tools such as compiler and debugger

    - Features of JRE: 
        1. JRE stands for Java Runtime Environment, which it provides runtime environment for java applications
        2. You need JRE in order to run java programs. 
        3. All the JDK already comes with JRE so you do not need to download and install separetly
        4. JRE contains the set of libraries and other files that JVM uses at runtime.
        5. The JRE contains the set of libraries for integrations such as Java Database Connectivity (JDBC), Java Naming and Directory Interface (JNDI), Remote Method Invocation (RMI), etc., 

    - JVM (Java Virtual Machine) - the 'javac' compiler does the translation from the java code (.java) to machine language (.class) 
    
    - JVM is a virtual machine that resides in the real machine and  the machine language for JVM is a 'bytecode'.

    - JVM executes the bytecode generated by compiler and produce output.
    - JVM is the one that makes java platform independent

    Features of JVM: 
        1. JVM makes it possible to run the Java code on any machine.
        2. It also allows to run java applications on cloud platforms.
        3. JDK and JRE both of these contains JVM.
        4. JVM is an interpreter as it executes the java code line by line
        5. JVM converts the bytecode into machine code.
        6. JVM is a platform independent
    
    - JVM Architecture:
        1. Class Loader: the 'class loader' reads the '.class' file and 'save the bytecode' in the 'method area'

        2. Method Area: it is the only one 'method area' in 'JVM' which is shared among all the classes. this holds the 'class level information' of each .class file.
        
        3. Heap: the 'heap' is a part of 'JVM' memory where 'objects are allocated'. the 'JVM' creates a class object for each '.class file'
        
        4. Stack: the 'stack' is also a part of 'JVM memory' but it is used for 'storing temporary variables'
        
        5. PC Register: this keeps the 'track of which instruction has been executed' and 'which one is going to be executed'.
        
        6. Native Method Stack: a 'native method' can access the 'runtime data areas' of the 'virtual machine'
        
        7. Native Method Interface: it 'enables java code to call or to be called' by 'native applications'. native applications are programs that are specific to the hardware and OS of a system.
        
        8. Garbage Collection: a 'class instance' is explicitly create by 'java code' and after use it is 'automatically destroyed' by 'garbage collection' for 'memory management'

-> Create a Sample Java Program
    public: this makes the main method public that means that we can call the method from outside of the class

    static: we do not need to create object for a static methods to run. they can run itself

    void: it does not return anything

    main: it is a method name. this is the entry point method from which the JVM can run the program

    (String args[]): used for command line arguments that are passed as strings

    System.out.println(): this method prints the contents inside the double quotes into the console and inserts a newline after

-> Variables
    - declare the variable
        data_type variable_name = value;
    - int num;

    - Rules in declaring the Variables: 
        1. The variable name should not contain the space
        2. The variable name can begin with special characters such as '$' and '_'
        3. The variable name should begin with 'lowercase' letters
        4. The variables are case sensitive

    - Diff., types of Variables: 
        1. Local Variables
        2. Static (or Class) Variables
        3. Instance Variables


-> Static (or Class) Variables: The Static Variables are also known as Class Variables because they are associated with the class and common for all the instances of class.

-> Instance Variables: Each Instance (Object) of class has its own copy of Instance Variables.

-> Local Variables: The variables are declared inside method of a class. Their scope is limited to the method which means you cannot change their values and access them outside of the method.

-> Data Types: 
    - defines the values that a variable can take.
    - there are 2 categories of data types: 
        1. primitive data types - 
            byte, short, int, long, float, double, char, 
            literals in java

        2. non primitive data types - 
            arrays and strings

-> Operators: 
    - an operator is a character that represents an action.
    - types of operators:
        1. arithmatic
        2. assignment 
        3. auto - increment and auto - decrement
        4. logical operators
        5. comparison (relational)
        6. bitwise 
        7. ternary
    - operator precedence: 
        - unary: ++, --, !, ~
        - multiplicative: *, /, % 
        - additive: +, - 
        - shift: <<, >>, >>>
        - relational: <, >, <=, >=
        - equality: ==, !=
        - bitwise AND: & 
        - bitwise XOR: ^
        - bitwise OR: | 
        - logical AND: && 
        - logical OR: ||
        - ternary: ?:
        - assignment: +=, -=, *=, /=, %=

-> Statements: 
    - decision making statements
        - if statement
        - if-else statement
        - if-else-if statement
        - nested statement
        - switch case statement

    - loop statements
        - for 
        - while 
        - do while

    - continue statement
    - break statement

