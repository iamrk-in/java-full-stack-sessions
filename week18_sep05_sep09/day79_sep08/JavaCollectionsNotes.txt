-> Java Collections Framework
    - the Java Collections Framework is a collection of Interfaces and Classes which helps in storing and processing the data effeciently.

    - this Framework has several useful classes which have tons of useful functions which makes a programmer task is easy.

    - List of Java Collections: 
        1. ArrayList
        2. LinkedList
        3. Vector
        4. HashSet
        5. LinkedHashSet
        6. TreeSet
        7. HashMap
        8. TreeMap
        9. LinkedHashMap
        10. HashTable
        11. Iterator and ListIterator
        12. Comparable and Comparator
    
-> Java Collections - List: 
    - a List is an ordered collection (sequence).
    - Lists may contain duplicate elements
    - Elements can be inserted or accessed by their position in the list, using a zero - based index.

- a List ie., categorized into 1. ArrayList and 2. LinkedList

*********************************************************************************
-> ArrayList: 
    - an ArrayList class implements the List Interface and it is based on an Array Data Structure.

    - It is used because of the Functionality and Flexibility
    - ArrayList is a resizable-array implement of the List interface.
    - It implements all optional list operations, and permits all elements including NULL.


    - Why ArrayList is better than Array?
        - an Array is having a limitation as which is a fixed - length
        - Where we cannot add more elements once it is reached

        - ArrayList can be a dynamically grown and shrink after addition and removal
        - an ArrayList is a class, that enables us to use predefined methods.

    - How to Create an ArrayList?
        - syntax: 
            ArrayList<String> aList = new ArrayList<String>();
            ArrayList<Integer> aList = new ArrayList<Integer>();

    - How to add Elements to an ArrayList?
        - syntax: 
            aList.add("steve");
            aList.add(2, "steve");

        - Example: 
            AddElementsArrayList.java

    - Change an Element in ArrayList: 
        - using the set() method to change an element in ArrayList
        - we provide the index and new element to set() method

        - Example: 
            ChangeElementArrayList.java

    - Remove an Element in ArrayList:
        - we use remove() method to remove elements
        - Example: 
            RemoveElementArrayList.java

    - Iterating ArrayList: 
        - looping 
        - Example: 
            IteratingArrayList.java

    - ArrayList Size: 
        - size()
        - ArrayListSize.java
        - Example: 
            ArrayListSize.java

        - Example: 
            ArrayListAddRemoveChangeSize.java
        
    - Sort ArrayList: 
        - sort()
        - Example: SortArrayList.java

    - Methods of ArrayList Class: 
        1. add(Object o) - 
            obj.add('hello');
        2. add(int index, Object o) - 
            obj.add(2, 'bye');
        3. remove(Object o) - 
            obj.remove('hello');
        4. remove(int index) - 
            obj.remove(3);
        5. set(int index, Object o) - 
            obj.set(2, 'tom');
        6. int indexOf(Object o) - 
            int pos = obj.indexOf('tom');
        7. Object get(int index) - 
            String str = obj.get(2);
        8. int size() - 
            int numberofitems = obj.size();
        9. boolean contains(Object o) - 
            obj.contains('tom')
        10. clear() - 
            obj.clear();

    Initialize:
    1. ArrayList Initialization using Array.asList() method: 
        Example: ArrayListInitialization.java

    2. Anonymous Inner Class method to Initialize an ArrayList
        Example: AnonymousInnerClassMethodInitialize.java

    3. Normal way of ArrayList Initialization
        Example: NormalArrayListInitialization.java

    4. Initializing an ArrayList with Multiple Same Elements using Collections.nCopies()
        Example: InitializingArrayListMultipleElements.java


    Looping: 
        - There are 4 ways to loop ArrayList

        1. for loop
        2. Advanced for loop
        3. while loop
        4. iterator

        Example: LoopingExample.java

        - How to Iterate arrayList Elements using Enumeration Interface:
            Example: IterateArrayListElementsusingEnumerationInterface.java

    Finding Length of ArrayList:
        - Example: FindingArrayListSize.java
        - Example: AnotherExampleFindingArrayListSize.java

    
    Sorting: 
        - Sort ArrayList / Sort ArrayList in Ascending Order
            Example: SortArrayListinAscendingOrder.java
            Example: SortArrayListinAscendingOrderwithIntegerType.java

        - Sort ArrayList in Descending Order 
            Example: SortArrayListinDescendingOrder.java
            
            Sort ArrayList entered by User in Descending Order
            Example: SortEnteredArrayListInDescendingOrder.java

        - Sort ArrayList of Objects using Comparable and Comparator
            Example: SortArrayListOfObjects.java

            - What's the need of Comparable and Comparator?
            Example: CreatingGroupOfPropertiesMethodsOfStudent.java
                and now, we have an ArrayList of Student Object, which can be defined like this: 
            Example: CreatingArrayListOfStudentObject.java

            Sorting of ArrayList<Object> with Comparable: 
            Example: ImplementingComparable.java

        - Comparable: 
            - Comparable Interface is mainly used to sort the Arrays (or Lists) of Custom Objects.

            - Lists of Objects that implement Comparable Interface can be sorted automatically by Collections.sort (Arrays.sort)

            - Example: Sorting Arrays and Wrapper Class
                SortingArraysandWrapperClass.java

            - Example: Sorting Custom Object by Implementing Comparable Interface
                Author.java
                SortAuthNames.java

        - Comparator: 
            - with the concept of Comparable we can sort the objects based on any data member., for example., if we have AuthorName, BookName, AuthorAge 
            
            - but, 'what if we want to have multiple choices and we can sort objects based on any choice'

            // Sorting arrayList al by AuthorAge
            Collections.sort(al, new AuthorAgeComparator())

            // Sorting arrayList al by BookName
            Collections.sort(al, new BookNameComparator())

            Example: 
                Authorcpt.java
                FirstNameComparator.java
                AuthorAgeComparator.java
                BookNameComparator.java
                SortingPgm.java

        - Sorting ArrayList<Object> multiple properties with Comparator
            Example: 
                SortingArrayListMultiplePropertiesComparator.java
                SortingProgram.java
            
        - Clone of ArrayList: 
            - clone()
            - Example1: Creating a Copy of an ArrayList using clone()
                CreatingCopyOfArrayListClone.java

            - Example2: Clone Integer ArrayList
                CreatingCloneIntegerArrayList.java

        - Get Uniques from an ArrayList / How to Remove Duplicates from ArrayList:
            - Example1: Removing Duplicates from ArrayList using LinkedHashSet
                1. Copying all the elements of ArrayList to LinkedHashSet
                2. Emptying the ArrayList using clear() method
                3. Copying all the elements of LinkedHashSet (non - duplicate elements) to the ArrayList. 
                
                RemoveDuplicatesArrayList.java

            - Example2: Removing Duplicates using Iterator
                RemovingDuplicatesUsingIterator.java
            
            - Example3: Removing Duplicates using stream distinct()
                RemovingDuplicatesUsingStreamDistinct.java

        - Find SubList of an ArrayList: 
            Example1: Getting a SubList from an ArrayList
                GettingSubListFromArrayList.java

            Example2: subList() method - IndexOutOfBoundsException
                SubListMethodIndexOutOfBoundsException.java

            Example3: subList() method - IllegalArgumentException
                SubListMethodIllegalArgumentException.java
            
        - Delete Elements from an ArrayList: 
            Example1: RemoveElementsFromArrayList.java

*********************************************************************************
-> LinkedList: 
    - it is a Linear Data Structure

    1. LinkedList Representation: 
        - Each element in the LinkedList is called the Node.
        - Each Node of the LinkedList contains two items: 
            1. Content of the Element
            2. Pointer / Address / Reference to the Next Node 

        Note: 
            1. Head of the LinkedList only contains the Address of the First Element of the List.
            2. The Last Element of the LinkedList contains null in the Pointer part of the Node
            3. We have three: 1. Single LinkedList, 2. Double LinkedList and 3. Circular LinkedList

    2. Why we require LinkedList?
        1. Size of the array is fixed
        2. Array elements 'needs contigous memory location'
        3. Inserting an element in an array is performance wise expensise

        - There are some limitations: 
        1. LinkedList allows 'dynamic memory allocation'
        2. LinkedList elements don't need contigous memory location
        3. Insert and delete operations in the LinkedList are not performance wise expensive 

    Example: LinkedList Example in Adding Elements
        LinkedListAddElements.java

    Example: Removing Elements from LinkedList
        RemovingElementsfromLinkedList.java

    Methods of LinkedList class: 
        1. boolean add(Object item)
        2. void add(Object item)
           void add(int index, Object item)
        3. boolean addAll(Collection c)
            LinkedList<String> listObj = new LinkedList<String>();
            ArrayList<String> arrayList = new ArrayList<String>();
            arrayList.add("string 1");
            arrayList.add("string 2");
            listObj.addAll(arrayList);

        4. boolean addAll(int index, Collection c)
        5. void addFirst("text")
        6. void addLast(Object item)
            listobj.addLast("steve")
        7. void clear()
            listobj.clear()
        8. Object clone()
            Object str = listobj.clone()
            System.out.println(str)
        9. boolean contains(Object item)
            boolean var = listobj.contains("teststring")
        10. Object get(int index)
            Object var = listobj.get(2)
        11. Object getFirst()
            Object var = listobj.getFirst()
        12. Object getLast()
            Object var = listobj.getLast()
        13. int indexOf(Object item)
            int pos = listobj.indexOf("hello")
        14. int lastIndexOf(Object item)
            int pos = listobj.lastIndexOf("hello")
        15. Object poll()
            Object o = listobj.poll()
        16. Object pollFirst()
            Object o = listobj.pollFirst()
        17. Object pollLast()
            Object o = pollLast()
        18. Object remove()
            listobj.remove()
        19. Object remove(int index)
            listobj.remove(4)
        20. Object remove(Object obj)
            listobj.remove("testitem")
        21. Object removeFirst()
            listobj.removeFirst()
        22. Object removeLast()
            listobj.removeLast()
        23. Object removeFirstOccurance(Object item)
            listobj.removeFirstOccurance("text")
        24. Object removeLastOccurance()
            listobj.removeLastOccurance("string1")
        25. Object set(int index, Object item)
            listobj.set(2, "test")
        26. int size()
            listobj.size()

        - Iterate LinkedList
        - Adding an element to LinkedList
        - Add element at the beginning and end of the LinkedList
        - Adding an element to the front of LinkedList
        - Remove First and Last elements from LinkedList
        - Remove specified element from LinkedList
        - Remove all elements from LinkedList
        - Append all the elements of a List to LinkedList

        - Get element from specific index of LinkedList
            Example: GetElementSpecificIndexOfLinkedList.java

        - Get SubList from LinkedList
            Example: GetSubListOfLinkedList.java

        - Iterator/ListIterator
            Example: 
                LinkedListListIterator.java
        
        - push(), pop()
        - poll(), pollFirst(), pollLast()
            LinkedListPollMethod.java

        - peek(), peekFirst(), peekLast()
            LinkedListPeekMethod.java

    - LinkedList vs ArrayList:
        - Refer the LinkedList_vs_ArrayList.docx

*********************************************************************************
-> Vector: 
    - Vector implements List Interface. 
    - Like ArrayList it also maintains insertion order but it is rarely used in non-thread environment as it is synchronized and due to which it gives poor performance in searching, adding, deleting, and updating of its elements.

    - There are 3 ways to create Vector class Object: 
    - Method1: 
        syntax: Vector vec = new Vector();
        - a default size is 10

    - Method2: 
        syntax: Vector object = new Vector(int initialCapacity);
        example: Vector object = new Vector(3);

    - Method3: 
        syntax: Vector object = new Vector(int initialCapacity, capacityIncrement);
        example: Vector vec = new Vector(4, 6);

    - Example: 
        CreatingVectorObject.java

    - Commonly used methods of Vector Class: 
        1. void addElement(Object element)
        2. int capacity()
        3. int size()
        4. void setSize(int size)
        5. boolean contains(Object element)
        6. boolean elementAt(int index)
        7. Object elementAt(int index)
        8. Object firstElement()
        9. Object lastElement()
        10. Object get(int index)
        11. boolean isEmpty()
        12. boolean removeElement(Object element)
        13. boolean removeAll(Collection c)
        14. void setElementAt(Object element, int index)

    About Vector: 
    - Get SubList from Vector
        GetSubListFromVector.java

    - Sort Vector using Collections.sort()
        SortVectorUsingCollectionsSort.java

    - Search Element in Vector using Index
        SearchElementInVectorUsingIndex.java

    - Copy Elements of One Vector to Another
        CopyElementsOfOneVectorToAnother.java

    Remove / Sort / Replace: 
    - Remove Element from Specified Index in Vector: 
        RemoveElementFromSpecifiedIndexInVector.java

    - Remove All Elements from Vector: 
        RemoveAllElementsFromVector.java

    Iterator / ListIterator / Enumeration: 
    - Vector Enumeration Example
        VectorEnumerationExample.java

    - Vector Iterator Example
        VectorIteratorExample.java

    - Vector ListIterator Example
        VectorListIteratorExample.java

    Conversions: 
    - Convert Vector to List
        ConvertVectorToList.java

    - Convert Vector to ArrayList
        ConvertVectorToArrayList.java

    - Convert Vector to String Array
        ConvertVectorToStringArray.java

    Differences: 
    - Vector vs ArrayList
        ArrayList_vs_Vector.docx


*********************************************************************************
-> HashMap: 
    - HashMap is a map based collection that is used for key & value pairs
    - It is denoted by HasMap<Key, Value> or HashMap<K, V>
    - This class makes no guarantee as to the order of the map.
    - It is similar to the HashTable class except that it is unsync., 

    Example: 
        HashMapSampleExample.java

    - HashMap Class Methods: 
        1. void clear(): it removes all the key and value pairs from the specified Map.
        2. Object clone(): it returns a copy of all the mappings of a map and used for cloning them into another map.
        3. boolean containsKey(Object key): it is a boolean function which returns true or false based on whether the specified key is found in the map.
        4. boolean containsValue(Object value): it is a boolean function which returns true or false based on whether the specified value is found in the map.
        5. Value get(Object key): it returns the value for the specified key.
        6. boolean isEmpty(): it checks whether the map is empty., if there are no key - value mapping present in the map then this function returns true else false.
        7. Set keySet(): it returns the Set of the keys fetched from the map.
        8. value put(Key k, Value v): inserts key value mapping into the map.
        9. int size(): returns the size of the map - number of key - value mappings.
        10. Collection values(): it returns a collection of values of map.
        11. Value remove(Object key): it removes the key - value pair for the specified key.
        12. void putAll(Map m): copies all the ements of a map to the another specified map.

    - Iterate HashMap - IterateHashMap.java
    - Sort HashMap by Keys and Values - SortHashMapKeysValues.java
    - Get Size of HashMap - SizeOfHashMap.java
    - Remove Key - Value mapping from HashMap - RemoveKeyValueMappingFromHashMap.java
    - Remove all mapping from HashMap - RemoveAllMappingFromHashMap.java
    - Check if HashMap is empty or not? - CheckIfHashMapEmptyOrNot.java

    - Check if particular key exists in HashMap - CheckKeyExistsHashMap.java
    - Check if particular value exists in HashMap - CheckValueExistsHashMap.java

    - Serialize HashMap - SerializeHashMap.java
        - HashMap class is serialized by default
        
        - Serialization: It is a process of writing an Object into a file with its attributes and content. It internally converts the object in stream of bytes

        - De-Serialization: It is a process of reading the Object and its properties from a file along with the Object's content

        - DeSerializationHashMap.java

    - Synchronize HashMap - SynchronizeHashMap.java

    - Differences: 
        - HashMap vs ArrayList